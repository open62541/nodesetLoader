name: WindowsBuildOnly

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-2019

    steps:
    - name: install conan
      run:  pip install conan

##libcheck
    
    - uses: actions/checkout@master
      with:
        repository: libcheck/check
        ref: refs/tags/0.15.2
        path: ./checkRoot


    #- name: run vcvarsall
    #  shell: cmd
    #  run: call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
    - uses: ilammy/msvc-dev-cmd@v1
    - name: Create Build Environment for libcheck
      run: cd ./checkRoot && cmake -G "NMake Makefiles" . && nmake && nmake install

    - uses: actions/checkout@v2
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - uses: ilammy/msvc-dev-cmd@v1
    - name: Build nodesetLoader
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cd ./build && cmake -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DENABLE_TESTING=ON . && nmake

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
    #  Execute tests defined by the CMake configuration.  
    # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest
